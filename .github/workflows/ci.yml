# .github/workflows/ci.yml

name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-format:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: "Install Poetry"
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: "Configure Poetry"
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: "Cache Poetry dependencies"
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: "Install dependencies"
        run: poetry install

      - name: "Run Linter & Formatter"
        run: |
          poetry run ruff check .
          poetry run ruff format --check .

  type-check:
    name: "Type Checking"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: "Install Poetry"
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: "Configure Poetry"
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: "Cache Poetry dependencies"
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: "Install dependencies"
        run: poetry install

      - name: "Run Type Checker"
        run: poetry run mypy agent-core agent-engine agent-concurrent agent-persist agent-sim

  test:
    name: "Run Tests & Check Coverage"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: "Install Graphviz"
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz graphviz-dev libgraphviz-dev pkg-config

      - name: "Install Poetry"
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: "Configure Poetry"
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: "Cache Poetry dependencies"
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: "Install dependencies"
        run: poetry install

      - name: "Run Tests and Check Coverage"
        run: poetry run pytest --cov=agent_core --cov=agent_engine --cov-report=term-missing --cov-fail-under=80
