services:
  # The Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # MODIFIED: Use a named volume to preserve the .venv from the image
    volumes:
      - .:/app
      - poetry_venv:/app/.venv
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/agent-core/src:/app/agent-engine/src:/app/agent-sim/src:/app/agent-concurrent/src:/app/agent-persist/src:/app/simulations
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    command: tail -f /dev/null

  # The Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: poetry run agentsim start-worker -Q "experiments,simulations" -c 4
    env_file:
      - .env
    # MODIFIED: Also preserve the .venv here
    volumes:
      - .:/app
      - poetry_venv:/app/.venv
    environment:
      PYTHONPATH: /app/agent-core/src:/app/agent-engine/src:/app/agent-sim/src:/app/agent-concurrent/src:/app/agent-persist/src:/app/simulations
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    restart: unless-stopped

  # The PostgreSQL Database Service
  db: # Named 'postgres' to match the DATABASE_URL in .env.example
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # The Redis Service (no changes needed)
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # The MLflow Service (no changes needed)
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.14.1
    ports:
      - "5001:5000"
    volumes:
      - ./mlruns:/mlruns
    command: >
      bash -c "
        apt-get update && apt-get install -y curl &&
        mlflow server
          --backend-store-uri file:///mlruns
          --host 0.0.0.0
          --port 5000
      "
    healthcheck:
      # Use a simple, more reliable health check URL
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped


volumes:
  postgres_data:
  redis_data:
  poetry_venv: